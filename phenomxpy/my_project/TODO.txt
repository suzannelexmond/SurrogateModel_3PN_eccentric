- instead of cutting waveforms, change freqmin for every waveform so it is all same length (much faster)
- change waveform size to time in [M]
- test greedy algorithm (differen strategy?)
- integrate chi, rel_anomaly and deltaT in all classes

(06/06/2025):
- Somehow the image folder for EMp nodes don't appear eventough it said the images are saved. 
I tried to alter the emperical nodes code to make it more efficient, but it doesnt work yet
I tried it out by adding a _test function, but it already errors in the normal function I don't think I changed.

(17/06/2025):
- I compared SimInspiralTD to PhenomT (from phenomxpy package) and they work in slightly different units:
==============================================================
Comparison of Gravitational Wave Outputs: SimInspiral vs PhenomT
==============================================================

1. Waveform Polarizations
-------------------------
Both methods produce:
  - h_+(t): plus polarization
  - h_x(t): cross polarization

But with different conventions for units and scaling.

2. SimInspiralTD (LALSimulation)
--------------------------------
- Units: SI (strain)
- Includes:
    ✓ Physical constants (G, c)
    ✓ Source masses (kg)
    ✓ Distance to source (m)
    ✓ Inclination, phase, etc.
- Output is directly:
    h(t) ~ (G^2 / c^4) * (M^5/3 * f(t)^{2/3}) / D_L
    → in physical strain units (~10⁻²¹ for typical BBH)

3. PhenomT (phenomxpy)
-----------------------
- Units: Geometrized (G = c = 1)
- Output is:
    h(t) ~ M / D     (dimensionless, normalized)
    (no physical units applied)
- Needs rescaling to match physical strain:
    h_SI(t) = h_PhenomT(t) × (G * M_total / c^2) / D_L

4. Correct Rescaling to SI Strain
----------------------------------
Given:
  - M_total in kg
  - D_L in meters

Use:
  - scaling_factor = (G * M_total / c^2) / D_L
  - h_scaled = h_PhenomT × scaling_factor

This produces waveforms directly comparable to SimInspiralTD.

==============================================================

Applying this, almost gives you the same kind of waveform, but the phase seems slightly off. 

- Made the waveform independent of mass and distance since they are just scaling factors. Did this by doing h(t)*(D/M), because polarisations are dependent like h(t) ~ (M/D)

NEXT TIME:
- Why is there a slight difference in the phase?
- How do I work with phase and amplitude extraction of the waveforms?




18/06/2025:
- Figured out the structure of the phenom waveform!

PhenomT Parameters — User-facing vs Internal Attribute Names

Physical Meaning           | User-facing attribute (set on PhenomT) | Internal attribute (in phen.pWF.__dict__) | Notes
---------------------------------------------------------------------------------------------------------------
Minimum frequency          | f_min                                  | f_lower                                   | Frequency where waveform starts
Reference phase            | phi_ref                                | phiRef                                    | Initial orbital phase
Inclination angle          | inclination                            | inclination                               | Angle between observer and orbital axis
Total mass                 | passed as argument to compute_polarizations | total_mass                                | Needed for physical scaling of strain
Mass ratio                 | mass_ratio (sometimes set on pWF)     | q                                         | Defined as m2/m1 ≤ 1
Individual masses          | (not always set explicitly)            | mass1, mass2                              | Component masses normalized internally
Spin z-components          | spin_1z, spin_2z                      | s1z, s2z                                  | Dimensionless spin projections
Time step size             | delta_t                               | delta_t or delta_t_sec                     | Step size for time-domain arrays
Eccentricity               | eccentricity                          | eccentricity                              | Orbital eccentricity
Mode                       | mode                                 | mode                                      | Harmonic mode(s), e.g., [2,2]
Reference frequency        | f_ref                                | f_ref or sometimes fref                    | Frequency where phase is referenced
Phase reference (mean anomaly) | phi_ref or mean_anomaly           | mean_anomaly or phiRef                     | Orbital phase reference

Notes:
- Use the user-facing attributes when creating and setting up the PhenomT instance.
- The internal attribute names may differ slightly but represent the same physical quantities.
- total_mass is generally passed only when generating physical strains (e.g., in compute_polarizations).
- mass_ratio and individual masses may be interrelated internally; setting mass_ratio is often enough.


Example:
phen = PhenomT(mode=[2,2], eccentricity = 0.01) # eccenticity needs to be called in the model directly or it doesn't trigger PhenomTE!
phen.spin_1z = 0.0
phen.spin_2z = 0.0
phen.inclination = 0.0
phen.phi_ref = 0.0
phen.f_min = 20.0
phen.delta_t = 1/4096



3. Mass and Distance scaling:
-----------------------------
Mass and distance are handled when computing polarizations:

phen.compute_polarizations(
    inclination=incl,
    phiRef=phi_ref,
    times=times,
    total_mass=total_mass,   # total mass in solar masses
    distance=distance        # distance in Mpc
)

If these are omitted, the strain will remain mass- and distance-independent (geometric units).

4. Typical usage example:
-------------------------
phen = PhenomT(mode=[2,2])
phen.spin_1z = 0.0
phen.spin_2z = 0.0
phen.inclination = 0.0
phen.phi_ref = 0.0
phen.f_min = 20.0
phen.delta_t = 1/4096
phen.eccentricity = 0.01

phen.pWF.q = 1.5
phen.pWF.mass1 = 30.0
phen.pWF.mass2 = 20.0

times = np.linspace(-4000, 0, num=3000)
phen.compute_hlm(times)
phen.compute_polarizations(phen.inclination, phen.phi_ref, times, total_mass=50, distance=500)

5. Inspecting parameters:
-------------------------
You can list all internal waveform parameters using:

print(phen.pWF.__dict__)

---

Note:
pWF = "Phenomenological WaveForm" internal parameter object within PhenomT that holds detailed settings and physical parameters.





30/06/2025:
- I was using a different waveform class, so somehow this didn;t give me the right waveform. 
Instead use the class: from phenomxpy.common import Waveform
parameters = {'mass1': m1, # Solar masses
            'mass2':m2, # Solar masses          
            'distance':distance, # Mpc
            'longAscNodes':long_asc_nodes,
            'spin1x':0., 
            'spin1y':0., 
            'spin1z':S1z,
            'spin2x':0., 
            'spin2y':0., 
            'spin2z':S2z, 
            'f_max':0,
            'delta_t_sec':deltaT,
            'inclination':incl, 
            'phiRef':phi_ref - np.pi/2,  # LAL uses phiRef + pi/2
            'eccentricity':ecc,
            'mean_anomaly':0.,
            'mode_array':[[2,2]]
            }

waveform_arguments={}
waveform_arguments["f_lower"] = f_min_eccTD - 1
waveform_arguments["f_ref"] = f_ref

NOTE! 'phiRef':phi_ref - np.pi/2,  # LAL uses phiRef - pi/2
So EccentricTD uses h(t) = h+ + hx and PhenomT uses h(t)= h+ - hx, so this automatically gives pi/2 difference due to cos and sin difference!

- Don't know why this happens yet, butthe waveforms don't seem to have the same length. They do seem to correspond with waveform_arguments["f_lower"] = f_min_eccTD - 1.
Still need to figure out why...

- There still seems to be a veeery slight phase difference, but that is probably due to different approximations and PN-terms.
Possibility to do: plot both in frequency domain and check what the fuck is going on